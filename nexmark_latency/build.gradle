/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * License); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id 'java'
}

repositories {
    mavenCentral()
    maven {
        url "https://packages.confluent.io/maven/"
    }
}

description = "Apache Beam :: SDKs :: Java :: Nexmark"

// When running via Gradle, this property can be used to pass commandline arguments
// to the nexmark launch
def nexmarkArgsProperty = "nexmark.args"

// When running via Gradle, this property sets the runner dependency
def nexmarkRunnerProperty = "nexmark.runner"
def nexmarkRunnerDependency = project.findProperty(nexmarkRunnerProperty)
        ?: ":runners:direct-java"
def shouldProvideSpark = ":runners:spark".equals(nexmarkRunnerDependency)
def isDataflowRunner = ":runners:google-cloud-dataflow-java".equals(nexmarkRunnerDependency)
def runnerConfiguration = ":runners:direct-java".equals(nexmarkRunnerDependency) ? "shadow" : null

if (isDataflowRunner) {
  /*
   * We need to rely on manually specifying these evaluationDependsOn to ensure that
   * the following projects are evaluated before we evaluate this project. This is because
   * we are attempting to reference a property from the project directly.
   */
  evaluationDependsOn(":runners:google-cloud-dataflow-java:worker:legacy-worker")
}

configurations {
  // A configuration for running the Nexmark launcher directly from Gradle, which
  // uses Gradle to put the appropriate dependencies on the Classpath rather than
  // bundling them into a fat jar
  gradleRun
}

dependencies {
  implementation project(":agents")
  testImplementation group: 'junit', name: 'junit', version: '4.12'
  implementation 'org.apache.kafka:kafka-clients:2.4.1'
  implementation 'org.apache.beam:beam-vendor-guava-26_0-jre:0.1'
  implementation 'org.apache.beam:beam-sdks-java-core:2.27.0'
  implementation 'org.apache.beam:beam-sdks-java-extensions-sql:2.27.0'
  implementation 'org.apache.beam:beam-sdks-java-extensions-sql-zetasql:2.27.0'
  implementation 'org.apache.beam:beam-sdks-java-test-utils:2.27.0'
  implementation 'org.apache.beam:beam-runners-flink-1.11:2.27.0'
  implementation 'org.apache.beam:beam-runners-spark:2.27.0'
  implementation 'org.apache.beam:beam-sdks-java-io-kafka:2.27.0'
  implementation 'io.confluent:kafka-avro-serializer:5.3.2'
  implementation 'org.apache.beam:beam-runners-direct-java:2.13.0'
  implementation 'org.apache.beam:beam-runners-google-cloud-dataflow-java:2.13.0'
  implementation 'com.google.auto.value:auto-value-annotations:1.6'
  annotationProcessor 'com.google.auto.value:auto-value:1.6'
  testImplementation group: 'org.hamcrest', name: 'hamcrest', version: '2.2'
  implementation group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.30'
  // https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind
  implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.12.2'
  implementation group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.12.2'
  implementation group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: '2.12.2'
  implementation group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-joda', version: '2.12.2'
  implementation group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jdk8', version: '2.12.2'
  implementation group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: '2.12.2'
  implementation group: 'com.fasterxml.jackson.module', name: 'jackson-module-jaxb-annotations', version: '2.12.2'
}

if (shouldProvideSpark) {
  configurations.gradleRun {
    // Using Spark runner causes a StackOverflowError if slf4j-jdk14 is on the classpath
    exclude group: "org.slf4j", module: "slf4j-jdk14"
  }
}

// Execute the Nexmark queries or suites via Gradle.
//
// Parameters:
//   -Pnexmark.runner
//       Specify a runner subproject, such as ":runners:spark" or ":runners:flink:1.10"
//       Defaults to ":runners:direct-java"
//
//   -Pnexmark.args
//       Specify the command line for invoking org.apache.beam.sdk.nexmark.Main
task run(type: JavaExec) {
  def nexmarkArgsStr =  project.findProperty(nexmarkArgsProperty) ?: ""

  if (isDataflowRunner) {
    dependsOn ":runners:google-cloud-dataflow-java:worker:legacy-worker:shadowJar"

    def dataflowWorkerJar = project.findProperty('dataflowWorkerJar') ?: project(":runners:google-cloud-dataflow-java:worker:legacy-worker").shadowJar.archivePath
    // Provide job with a customizable worker jar.
    // With legacy worker jar, containerImage is set to empty (i.e. to use the internal build).
    // More context and discussions can be found in PR#6694.
    nexmarkArgsStr = nexmarkArgsStr +
          " --dataflowWorkerJar=${dataflowWorkerJar} " +
          " --workerHarnessContainerImage="
  }

  main = "org.apache.beam.sdk.nexmark.Main"
  classpath = sourceSets.main.runtimeClasspath
  args nexmarkArgsStr.split()
  environment "FLINK_CONF_DIR", "."
}
